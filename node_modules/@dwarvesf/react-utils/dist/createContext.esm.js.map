{"version":3,"file":"createContext.esm.js","sources":["../src/createContext.tsx"],"sourcesContent":["import React from 'react'\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  errorMessage?: string\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\nexport default function createContext<ContextType>(\n  options: CreateContextOptions = {},\n) {\n  const {\n    strict = true,\n    errorMessage = 'useContext must be inside a Provider with a value',\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n    if (!context && strict) throw new Error(errorMessage)\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n"],"names":["createContext","options","strict","errorMessage","name","Context","React","undefined","displayName","useContext","context","Error","Provider"],"mappings":";;SAcwBA,cACtBC;MAAAA;AAAAA,IAAAA,UAAgC;;;AAEhC,iBAIIA,OAJJ;AAAA,iCACEC,MADF;AAAA,MACEA,MADF,gCACW,IADX;AAAA,uCAEEC,YAFF;AAAA,MAEEA,YAFF,sCAEiB,mDAFjB;AAAA,MAGEC,IAHF,YAGEA,IAHF;AAMA,MAAMC,OAAO,GAAGC,KAAK,CAACN,aAAN,CAA6CO,SAA7C,CAAhB;AAEAF,EAAAA,OAAO,CAACG,WAAR,GAAsBJ,IAAtB;;AAEA,WAASK,UAAT;AACE,QAAMC,OAAO,GAAGJ,KAAK,CAACG,UAAN,CAAiBJ,OAAjB,CAAhB;AACA,QAAI,CAACK,OAAD,IAAYR,MAAhB,EAAwB,MAAM,IAAIS,KAAJ,CAAUR,YAAV,CAAN;AAExB,WAAOO,OAAP;AACD;;AAED,SAAO,CACLL,OAAO,CAACO,QADH,EAELH,UAFK,EAGLJ,OAHK,CAAP;AAKD;;;;"}