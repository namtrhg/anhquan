'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function isSSR() {
  return typeof window === 'undefined';
}

function createContext(options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$strict = _options.strict,
      strict = _options$strict === void 0 ? true : _options$strict,
      _options$errorMessage = _options.errorMessage,
      errorMessage = _options$errorMessage === void 0 ? 'useContext must be inside a Provider with a value' : _options$errorMessage,
      name = _options.name;
  var Context = React__default.createContext(undefined);
  Context.displayName = name;

  function useContext() {
    var context = React__default.useContext(Context);
    if (!context && strict) throw new Error(errorMessage);
    return context;
  }

  return [Context.Provider, useContext, Context];
}

function noop() {}

function callAllHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function func(event) {
    fns.some(function (fn) {
      fn == null ? void 0 : fn(event);
      return event == null ? void 0 : event.defaultPrevented;
    });
  };
}

function truncate(str, num, middle, maskChar) {
  if (middle === void 0) {
    middle = false;
  }

  if (maskChar === void 0) {
    maskChar = '.';
  }

  if (str.length > num && str.length > 3) {
    if (!middle) {
      return "" + str.substring(0, num) + maskChar.repeat(3);
    }

    var a = Math.round(num * 2 / 3);
    var b = num - a;
    return "" + str.substring(0, a) + maskChar.repeat(3) + str.substring(str.length - b, str.length);
  }

  return str;
}

/**
 * Get a list of all valid React child elements
 * @param children
 */

function cleanChildren(children) {
  return React.Children.toArray(children).filter(function (child) {
    return React.isValidElement(child);
  });
}

function sleep(time) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, time);
  });
}

exports.callAllHandlers = callAllHandlers;
exports.cleanChildren = cleanChildren;
exports.createContext = createContext;
exports.isSSR = isSSR;
exports.noop = noop;
exports.sleep = sleep;
exports.truncate = truncate;
//# sourceMappingURL=react-utils.cjs.development.js.map
