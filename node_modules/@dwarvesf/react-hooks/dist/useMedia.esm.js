import { useCallback, useState, useEffect } from 'react';
import { isSSR } from '@dwarvesf/react-utils';

function useMedia(queries, values, defaultValue) {
  // Array containing a media query list for each query
  var mediaQueryLists = isSSR() ? [] : queries.map(function (q) {
    return window.matchMedia(q);
  });
  var getValue = useCallback(function () {
    var index = mediaQueryLists.findIndex(function (mql) {
      return mql.matches;
    });
    return (values == null ? void 0 : values[index]) || defaultValue; // only form the function once
    // eslint-disable-next-line
  }, []);

  var _useState = useState(getValue),
      value = _useState[0],
      setValue = _useState[1];

  useEffect(function () {
    // Event listener callback
    // Note: By defining getValue outside of useEffect we ensure that it has ...
    // ... current values of hook args (as this hook callback is created once on mount).
    var handler = function handler() {
      return setValue(getValue);
    };

    mediaQueryLists.forEach(function (mql) {
      return mql.addEventListener('change', handler);
    });
    return function () {
      return mediaQueryLists.forEach(function (mql) {
        return mql.removeEventListener('change', handler);
      });
    };
  }, // ensures effect is only run on mount and unmount
  // eslint-disable-next-line
  []);
  return value;
}

export default useMedia;
//# sourceMappingURL=useMedia.esm.js.map
