import { useState, useEffect, useMemo, useCallback } from 'react';

/**
 * React hook that provides method for manipulating pages
 *
 * @param pageSize Required
 * @param page Required
 * @param totalPage Required
 */

function usePagination(params) {
  var pageSize = params.pageSize,
      totalPage = params.totalPage,
      _page = params.page;

  var _useState = useState(_page),
      page = _useState[0],
      setPage = _useState[1];

  useEffect(function () {
    setPage(params.page);
  }, [params.page]);
  var hasNextPage = useMemo(function () {
    return page + 1 <= totalPage;
  }, [page, totalPage]);
  var hasPreviousPage = useMemo(function () {
    return page - 1 >= 1;
  }, [page]);
  var next = useCallback(function (toLast) {
    if (toLast === void 0) {
      toLast = false;
    }

    if (hasNextPage) {
      if (toLast) {
        setPage(totalPage);
      } else {
        setPage(function (p) {
          return p + 1;
        });
      }
    }
  }, [hasNextPage, totalPage]);
  var back = useCallback(function (toFirst) {
    if (toFirst === void 0) {
      toFirst = false;
    }

    if (hasPreviousPage) {
      if (toFirst) {
        setPage(1);
      } else {
        setPage(function (p) {
          return p - 1;
        });
      }
    }
  }, [hasPreviousPage]);
  var go = useCallback(function (page) {
    if (page >= 1 && page <= totalPage) {
      setPage(page);
    }
  }, [totalPage]);
  return {
    currentPage: page,
    pageSize: pageSize,
    totalPage: totalPage,
    hasNextPage: hasNextPage,
    hasPreviousPage: hasPreviousPage,
    next: next,
    back: back,
    go: go
  };
}

export default usePagination;
//# sourceMappingURL=usePagination.esm.js.map
