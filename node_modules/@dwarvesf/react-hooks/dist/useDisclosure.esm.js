import { useState, useCallback } from 'react';
import usePrevious from './usePrevious.esm.js';

function useDisclosure(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      onCloseProp = _props.onClose,
      onOpenProp = _props.onOpen;

  var _useState = useState(props.defaultIsOpen || false),
      isOpen = _useState[0],
      setIsOpen = _useState[1];

  var prevIsOpen = usePrevious(isOpen);
  var onClose = useCallback(function () {
    setIsOpen(false);

    if (onCloseProp) {
      onCloseProp();
    }
  }, [onCloseProp]);
  var onOpen = useCallback(function () {
    setIsOpen(true);

    if (onOpenProp) {
      onOpenProp();
    }
  }, [onOpenProp]);
  var onToggle = useCallback(function () {
    var action = isOpen ? onClose : onOpen;
    action();
  }, [isOpen, onOpen, onClose]);
  return {
    isOpen: !!isOpen,
    prevIsOpen: !!prevIsOpen,
    onOpen: onOpen,
    onClose: onClose,
    onToggle: onToggle
  };
}

export default useDisclosure;
//# sourceMappingURL=useDisclosure.esm.js.map
