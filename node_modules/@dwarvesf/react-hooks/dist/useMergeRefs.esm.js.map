{"version":3,"file":"useMergeRefs.esm.js","sources":["../src/useMergeRefs.ts"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react'\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (typeof ref === 'function') {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n */\nexport default function useMergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return React.useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    return (node: T) => {\n      refs.forEach((ref) => {\n        if (ref) assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n"],"names":["assignRef","ref","value","current","error","Error","useMergeRefs","refs","React","every","node","forEach"],"mappings":";;AAAA;SAKgBA,UAAmBC,KAA8BC;AAC/D,MAAID,GAAG,IAAI,IAAX,EAAiB;;AAEjB,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACA;AACD;;AAED,MAAI;AACF;AACAD,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,2BAAkCH,KAAlC,kBAAoDD,GAApD,OAAN;AACD;AACF;AAED;;;;;;;;;;;;;SAYwBK;oCAAmBC;AAAAA,IAAAA;;;AACzC,SAAOC,OAAA,CAAc;AACnB,QAAID,IAAI,CAACE,KAAL,CAAW,UAACR,GAAD;AAAA,aAASA,GAAG,IAAI,IAAhB;AAAA,KAAX,CAAJ,EAAsC;AACpC,aAAO,IAAP;AACD;;AACD,WAAO,UAACS,IAAD;AACLH,MAAAA,IAAI,CAACI,OAAL,CAAa,UAACV,GAAD;AACX,YAAIA,GAAJ,EAASD,SAAS,CAACC,GAAD,EAAMS,IAAN,CAAT;AACV,OAFD;AAGD,KAJD;AAKD,GATM,EASJH,IATI,CAAP;AAUD;;;;;"}