import { useEffect } from 'react';

var MOUSEDOWN = 'mousedown';
var TOUCHSTART = 'touchstart';
var events = [MOUSEDOWN, TOUCHSTART];
function useOnClickOutside(ref, handler) {
  useEffect(function () {
    if (!handler) {
      return;
    }

    var listener = function listener(event) {
      // Do nothing if clicking ref's element or descendent elements
      if (!ref.current || ref.current.contains(event.target)) {
        return;
      }

      handler(event);
    };

    events.forEach(function (event) {
      document.addEventListener(event, listener);
    });
    return function () {
      events.forEach(function (event) {
        document.removeEventListener(event, listener);
      });
    };
  }, // Add ref and handler to effect dependencies
  // It's worth noting that because passed in handler is a new ...
  // ... function on every render that will cause this effect ...
  // ... callback/cleanup to run every render. It's not a big deal ...
  // ... but to optimize you can wrap handler in useCallback before ...
  // ... passing it into this hook.
  [ref, handler]);
}

export default useOnClickOutside;
//# sourceMappingURL=useOnClickOutside.esm.js.map
