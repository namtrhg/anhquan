import { useRef, useEffect } from 'react';
import { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';

function useWhyDidYouUpdate(name, props) {
  // Get a mutable ref object where we can store props ...
  // ... for comparison next time this hook runs.
  var previousProps = useRef({});
  useEffect(function () {
    if (previousProps.current) {
      // Get all keys from previous and current props
      var allKeys = Object.keys(_extends({}, previousProps.current, props)); // Use this object to keep track of changed props

      var changesObj = {};
      allKeys.forEach(function (key) {
        // If previous is different from current
        if (previousProps.current[key] !== props[key]) {
          // Add to changesObj
          changesObj[key] = {
            from: previousProps.current[key],
            to: props[key]
          };
        }
      }); // If changesObj not empty then output to console

      if (Object.keys(changesObj).length) {
        // eslint-disable-next-line no-console
        console.log('[why-did-you-update]', name, changesObj);
      }
    } // Finally update previousProps with current props for next hook call


    previousProps.current = props;
  });
}

export default useWhyDidYouUpdate;
//# sourceMappingURL=useWhyDidYouUpdate.esm.js.map
