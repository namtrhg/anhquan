{"version":3,"file":"useDebounce.esm.js","sources":["../src/useDebounce.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nexport default function useDebounce<T>(value: T, delay: number): T {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value)\n      }, delay)\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler)\n      }\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  )\n  return debouncedValue\n}\n"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout"],"mappings":";;SAEwBA,YAAeC,OAAUC;AAC/C;AACA,kBAA4CC,QAAQ,CAAIF,KAAJ,CAApD;AAAA,MAAOG,cAAP;AAAA,MAAuBC,iBAAvB;;AACAC,EAAAA,SAAS,CACP;AACE;AACA,QAAMC,OAAO,GAAGC,UAAU,CAAC;AACzBH,MAAAA,iBAAiB,CAACJ,KAAD,CAAjB;AACD,KAFyB,EAEvBC,KAFuB,CAA1B;AAIA;AACA;;AACA,WAAO;AACLO,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAZM,EAaP,CAACN,KAAD,EAAQC,KAAR,CAbO,CAAT;AAeA,SAAOE,cAAP;AACD;;;;"}