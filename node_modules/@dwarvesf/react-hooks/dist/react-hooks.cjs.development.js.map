{"version":3,"file":"react-hooks.cjs.development.js","sources":["../src/usePrevious.ts","../src/useDisclosure.ts","../src/useForceUpdate.ts","../src/useClipboard.ts","../src/useLockBodyScroll.ts","../src/useDebounce.ts","../src/useWhyDidYouUpdate.ts","../src/useConstant.ts","../src/useMergeRefs.ts","../src/useMedia.ts","../src/useAsyncEffect.ts","../src/useOnClickOutside.ts","../src/useHasMounted.ts","../src/usePagination.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\n/**\n * React hook that tracks previous value\n *\n * @param value the value to track\n */\nexport default function usePrevious<T>(value: T) {\n  const valueRef = useRef<T>()\n\n  useEffect(() => {\n    valueRef.current = value\n  }, [value])\n\n  return valueRef.current as T\n}\n","import { useState, useCallback } from 'react'\nimport usePrevious from './usePrevious'\n\nexport interface UseDisclosureProps {\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n}\n\nexport default function useDisclosure(props: UseDisclosureProps = {}) {\n  const { onClose: onCloseProp, onOpen: onOpenProp } = props\n\n  const [isOpen, setIsOpen] = useState(props.defaultIsOpen || false)\n\n  const prevIsOpen = usePrevious(isOpen)\n\n  const onClose = useCallback(() => {\n    setIsOpen(false)\n    if (onCloseProp) {\n      onCloseProp()\n    }\n  }, [onCloseProp])\n\n  const onOpen = useCallback(() => {\n    setIsOpen(true)\n    if (onOpenProp) {\n      onOpenProp()\n    }\n  }, [onOpenProp])\n\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    prevIsOpen: !!prevIsOpen,\n    onOpen,\n    onClose,\n    onToggle,\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n","import { useState, useCallback } from 'react'\n\n/**\n * React hook for force a component to re-render\n */\nexport default function useForceUpdate() {\n  const [count, setCount] = useState(0)\n  const forceUpdate = useCallback(() => setCount(count + 1), [count])\n\n  return forceUpdate\n}\n","import { useState, useCallback, useEffect } from 'react'\nimport copy from 'copy-to-clipboard'\n\nexport interface UseClipboardOptions {\n  /**\n   * timeout delay (in ms) to switch back to initial state once copied.\n   */\n  timeout?: number\n  /**\n   * Set the desired MIME type\n   */\n  format?: string\n}\n\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param {Number} [optionsOrTimeout=1500] optionsOrTimeout - delay (in ms) to switch back to initial state once copied.\n * @param {Object} optionsOrTimeout\n * @param {string} optionsOrTimeout.format - set the desired MIME type\n * @param {number} optionsOrTimeout.timeout - delay (in ms) to switch back to initial state once copied.\n */\nexport default function useClipboard(\n  text: string,\n  optionsOrTimeout: number | UseClipboardOptions = {},\n) {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const { timeout = 1500, ...copyOptions } =\n    typeof optionsOrTimeout === 'number'\n      ? { timeout: optionsOrTimeout }\n      : optionsOrTimeout\n\n  const onCopy = useCallback(() => {\n    const didCopy = copy(text, copyOptions)\n    setHasCopied(didCopy)\n  }, [text, copyOptions])\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [timeout, hasCopied])\n\n  return { value: text, onCopy, hasCopied }\n}\n","import { useLayoutEffect } from 'react'\n\nexport default function useLockBodyScroll(): void {\n  // useLaoutEffect callback return type is \"() => void\" type\n  useLayoutEffect((): (() => void) => {\n    // Get original body overflow\n    const originalStyle: string = window.getComputedStyle(\n      document.body,\n    ).overflow\n    // Prevent scrolling on mount\n    document.body.style.overflow = 'hidden'\n    // Re-enable scrolling when component unmounts\n    return () => {\n      document.body.style.overflow = originalStyle\n    }\n  }, []) // Empty array ensures effect is only run on mount and unmount\n}\n","import { useEffect, useState } from 'react'\n\nexport default function useDebounce<T>(value: T, delay: number): T {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value)\n      }, delay)\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler)\n      }\n    },\n    [value, delay], // Only re-call effect if value or delay changes\n  )\n  return debouncedValue\n}\n","import { useEffect, useRef } from 'react'\n\nexport default function useWhyDidYouUpdate(\n  name: string,\n  props: Record<string, any>,\n) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  const previousProps = useRef<Record<string, any>>({})\n  useEffect(() => {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      const allKeys = Object.keys({ ...previousProps.current, ...props })\n      // Use this object to keep track of changed props\n      const changesObj: Record<string, any> = {}\n      allKeys.forEach((key) => {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key],\n          }\n        }\n      })\n      // If changesObj not empty then output to console\n      if (Object.keys(changesObj).length) {\n        // eslint-disable-next-line no-console\n        console.log('[why-did-you-update]', name, changesObj)\n      }\n    }\n    // Finally update previousProps with current props for next hook call\n    previousProps.current = props\n  })\n}\n","import { useRef } from 'react'\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nexport default function useConst<T extends any | (() => any)>(init: T) {\n  const ref = useRef<T | null>(null)\n\n  if (ref.current === null) {\n    ref.current = typeof init === 'function' ? init() : init\n  }\n\n  return ref.current as T\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react'\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (typeof ref === 'function') {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n */\nexport default function useMergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return React.useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    return (node: T) => {\n      refs.forEach((ref) => {\n        if (ref) assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n","import { isSSR } from '@dwarvesf/react-utils'\nimport { useCallback, useEffect, useState } from 'react'\n\nexport default function useMedia<T>(\n  queries: string[],\n  values: T[],\n  defaultValue: T,\n) {\n  // Array containing a media query list for each query\n  const mediaQueryLists = isSSR()\n    ? []\n    : queries.map((q) => window.matchMedia(q))\n\n  const getValue = useCallback(() => {\n    const index = mediaQueryLists.findIndex((mql) => mql.matches)\n    return values?.[index] || defaultValue\n    // only form the function once\n    // eslint-disable-next-line\n  }, [])\n\n  const [value, setValue] = useState<T>(getValue)\n\n  useEffect(\n    () => {\n      // Event listener callback\n      // Note: By defining getValue outside of useEffect we ensure that it has ...\n      // ... current values of hook args (as this hook callback is created once on mount).\n      const handler = () => setValue(getValue)\n      mediaQueryLists.forEach((mql) => mql.addEventListener('change', handler))\n      return () =>\n        mediaQueryLists.forEach((mql) =>\n          mql.removeEventListener('change', handler),\n        )\n    },\n    // ensures effect is only run on mount and unmount\n    // eslint-disable-next-line\n    [],\n  )\n  return value\n}\n","import { useEffect } from 'react'\n\nexport default function useAsyncEffect<Data = any>(\n  callback: (isMounted: () => boolean) => Data | Promise<Data>,\n  onDestroyOrDependencies: null | ((result?: Data) => void) | any[] = [],\n  dependencies: any[] = [],\n) {\n  let deps: any[]\n  let destroy: (result?: Data) => void\n\n  if (typeof onDestroyOrDependencies === 'function') {\n    destroy = onDestroyOrDependencies\n    deps = dependencies\n  } else {\n    deps = onDestroyOrDependencies || []\n  }\n\n  useEffect(() => {\n    let result: Data\n    let mounted = true\n\n    const maybePromise = callback(() => {\n      return mounted\n    })\n\n    Promise.resolve(maybePromise).then((value) => {\n      result = value\n    })\n\n    return () => {\n      mounted = false\n\n      if (typeof destroy === 'function') {\n        destroy(result)\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps)\n}\n","import React, { useEffect } from 'react'\n\nconst MOUSEDOWN = 'mousedown'\nconst TOUCHSTART = 'touchstart'\n\ntype HandledEvents = [typeof MOUSEDOWN, typeof TOUCHSTART]\ntype HandledEventsType = HandledEvents[number]\ntype PossibleEvent = {\n  [Type in HandledEventsType]: HTMLElementEventMap[Type]\n}[HandledEventsType]\ntype Handler = (event: PossibleEvent) => void\n\nconst events: HandledEvents = [MOUSEDOWN, TOUCHSTART]\n\nexport default function useOnClickOutside(\n  ref: React.RefObject<HTMLElement>,\n  handler: Handler,\n) {\n  useEffect(\n    () => {\n      if (!handler) {\n        return\n      }\n\n      const listener = (event: PossibleEvent) => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target as Node)) {\n          return\n        }\n        handler(event)\n      }\n\n      events.forEach((event) => {\n        document.addEventListener(event, listener)\n      })\n\n      return () => {\n        events.forEach((event) => {\n          document.removeEventListener(event, listener)\n        })\n      }\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler],\n  )\n}\n","import { useState, useEffect } from 'react'\n\nexport default function useHasMounted() {\n  const [hasMounted, setHasMounted] = useState(false)\n  useEffect(() => {\n    setHasMounted(true)\n  }, [])\n  return hasMounted\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react'\n\nexport type UsePaginationParams = {\n  pageSize: number\n  totalPage: number\n  page: number\n}\n\nexport type UsePaginationResult = {\n  totalPage: number\n  pageSize: number\n  currentPage: number\n  // go to next page, optionally taking a boolean param to decide whether to go the last page immediately\n  next: (toLast?: boolean) => void\n  // back to previous page, optionally taking a boolean param to decide whether to go back to page 1 immediately\n  back: (toFirst?: boolean) => void\n  // jump to a specific page\n  go: (page: number) => void\n  hasNextPage: boolean\n  hasPreviousPage: boolean\n}\n\n/**\n * React hook that provides method for manipulating pages\n *\n * @param pageSize Required\n * @param page Required\n * @param totalPage Required\n */\nexport default function usePagination(\n  params: UsePaginationParams,\n): UsePaginationResult {\n  const { pageSize, totalPage, page: _page } = params\n\n  const [page, setPage] = useState(_page)\n\n  useEffect(() => {\n    setPage(params.page)\n  }, [params.page])\n\n  const hasNextPage = useMemo(() => page + 1 <= totalPage, [page, totalPage])\n  const hasPreviousPage = useMemo(() => page - 1 >= 1, [page])\n\n  const next = useCallback(\n    (toLast: boolean = false) => {\n      if (hasNextPage) {\n        if (toLast) {\n          setPage(totalPage)\n        } else {\n          setPage((p) => p + 1)\n        }\n      }\n    },\n    [hasNextPage, totalPage],\n  )\n\n  const back = useCallback(\n    (toFirst: boolean = false) => {\n      if (hasPreviousPage) {\n        if (toFirst) {\n          setPage(1)\n        } else {\n          setPage((p) => p - 1)\n        }\n      }\n    },\n    [hasPreviousPage],\n  )\n\n  const go = useCallback(\n    (page: number) => {\n      if (page >= 1 && page <= totalPage) {\n        setPage(page)\n      }\n    },\n    [totalPage],\n  )\n\n  return {\n    currentPage: page,\n    pageSize,\n    totalPage,\n    hasNextPage,\n    hasPreviousPage,\n    next,\n    back,\n    go,\n  }\n}\n"],"names":["usePrevious","value","valueRef","useRef","useEffect","current","useDisclosure","props","onCloseProp","onClose","onOpenProp","onOpen","useState","defaultIsOpen","isOpen","setIsOpen","prevIsOpen","useCallback","onToggle","action","useForceUpdate","count","setCount","forceUpdate","useClipboard","text","optionsOrTimeout","hasCopied","setHasCopied","timeout","copyOptions","onCopy","didCopy","copy","timeoutId","window","setTimeout","clearTimeout","useLockBodyScroll","useLayoutEffect","originalStyle","getComputedStyle","document","body","overflow","style","useDebounce","delay","debouncedValue","setDebouncedValue","handler","useWhyDidYouUpdate","name","previousProps","allKeys","Object","keys","changesObj","forEach","key","from","to","length","console","log","useConst","init","ref","assignRef","error","Error","useMergeRefs","refs","React","every","node","useMedia","queries","values","defaultValue","mediaQueryLists","isSSR","map","q","matchMedia","getValue","index","findIndex","mql","matches","setValue","addEventListener","removeEventListener","useAsyncEffect","callback","onDestroyOrDependencies","dependencies","deps","destroy","result","mounted","maybePromise","Promise","resolve","then","MOUSEDOWN","TOUCHSTART","events","useOnClickOutside","listener","event","contains","target","useHasMounted","hasMounted","setHasMounted","usePagination","params","pageSize","totalPage","_page","page","setPage","hasNextPage","useMemo","hasPreviousPage","next","toLast","p","back","toFirst","go","currentPage"],"mappings":"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"}